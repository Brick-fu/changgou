<?xml version="1.0" encoding="UTF-8"?>
<!--
    Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出。
-->
<!--
    monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数。
-->
<Configuration status="warn" monitorInterval="30">
    <Properties>
        <property name="sysCode">changgou</property>
        <property name="appCode">goods</property>
        <property name="LOG_EXCEPTION_CONVERSION_WORD">%xwEx</property>
        <property name="LOG_LEVEL_PATTERN">%5p</property>
        <property name="LOG_DATEFORMAT_PATTERN">yyyy-MM-dd HH:mm:ss.SSS</property>
        <property name="CONSOLE_LOG_PATTERN">%clr{%d{${LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${LOG_LEVEL_PATTERN}} %clr{[${sysCode},${appCode},%X{X-B3-TraceId},%X{X-B3-SpanId},%X{X-B3-ParentSpanId},%X{X-Span-Export}]} %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan}[%line] %clr{:}{faint} %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</property>
        <property name="FILE_LOG_PATTERN">%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} [${sysCode},${appCode},%X{X-B3-TraceId},%X{X-B3-SpanId},%X{X-B3-ParentSpanId},%X{X-Span-Export}] %pid --- [%t] %-40.40c{1.} [%line] : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</property>
        <!--日志级别-->
        <property name="LOG_LEVEL">info</property>
        <!--日志路径-->
        <property name="LOG_PATH" value="${sys:LOG_PATH:-.}"/>
        <property name="LOG_FILE" value="${sys:LOG_FILE:-./logs/application.log}"/>
    </Properties>

    <appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT" follow="true">
            <!-- 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${CONSOLE_LOG_PATTERN}"/>
        </Console>
        <!-- 文件会打印出所有信息，这个log每次重启项目会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
        <!-- append为TRUE表示重启后消息增加到指定文件中，false表示重启后消息覆盖指定的文件内容，默认值是true -->
        <File name="log" fileName="${LOG_PATH}/temp.log" append="false">
            <PatternLayout pattern="${FILE_LOG_PATTERN}"/>
        </File>
        <!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <!--应用日志-->
        <RollingRandomAccessFile name="RollingFile" fileName="${LOG_FILE}"
                                 filePattern="${LOG_PATH}/application-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${FILE_LOG_PATTERN}" charset="UTF-8"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="50M"/>
                <TimeBasedTriggeringPolicy interval="1"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了300 -->
            <DefaultRolloverStrategy max="300">
                <Delete basePath="${LOG_PATH}" maxDepth="1">
                    <IfFileName glob="application-*.log"/>
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
    </appenders>
    <loggers>
        <!-- 过滤掉spring和mybatis的一些信息，输出到配置的一个或多个AppenderRef中-->
        <logger name="org.springframework" level="INFO" additivity="false">
            <AppenderRef ref="TRACE_FILE" />
        </logger>
         <logger name="org.mybatis" level="INFO" additivity="false">
            <AppenderRef ref="log" />
        </logger>
        <!-- 建立一个默认的root的level是全局级别的 -->
        <root level="info">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFile"/>
        </root>
        <logger name="com.changgou.goods.dao" level="DEBUG"/>
        <logger name="com.netflix.discovery" level="error"/>
        <logger name="org.springframework" level="error"/>
        <logger name="org.springframework.cloud" level="error"/>
        <logger name="org.springframework.cloud.netflix.eureka" level="error"/>
    </loggers>
</Configuration>